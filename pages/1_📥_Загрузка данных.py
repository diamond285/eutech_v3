import pandas as pd
import psycopg2
import streamlit as st

st.set_page_config(
    page_title="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
    page_icon="üì•",
)


@st.cache_data
def load_data(url):
    if uploadedFile.name.endswith('.xlsx'):
        df = pd.read_excel(uploadedFile)
    else:
        df = pd.read_csv(uploadedFile)
    return df


uploadedFile = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª csv –∏–ª–∏ xlsx —Ñ–æ—Ä–º–∞—Ç–∞",
                                type=['csv', 'xlsx'],
                                accept_multiple_files=False,
                                key="fileUploader")

if uploadedFile:
    st.write(uploadedFile)
    df = load_data(uploadedFile)
    info = dict()
    info['name'] = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: ", df.columns)
    info['unit'] = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π: ", df.columns)
    info['cost'] = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–Ω–∞–º–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: ", df.columns)
    info['from'] = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ", df.columns)
    submit = st.button("–í—ã–±—Ä–∞—Ç—å")
    if submit:
        st.table(df[[info[x] for x in info]].head(5))
    load = st.button("–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
    if load:
        from datetime import datetime

        load_progress = st.progress(0, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É')
        conn = psycopg2.connect(dbname='eutech_vi6y',
                                user='root',
                                password='VREpVVk1we7kNlUhgepcyQp5Im5Jtho2',
                                host='dpg-clg3mpur45ec739aghkg-a.frankfurt-postgres.render.com')
        df = df[[info[x] for x in info]]
        df[info['from']] = df[info['from']].str.replace('\"', '\"\"').str.replace('\'', '\'\'')
        df[info['name']] = df[info['name']].str.replace('\"', '\"\"').str.replace('\'', '\'\'')
        df[info['unit']] = df[info['unit']].str.replace('\"', '\"\"').str.replace('\'', '\'\'')
        cur = conn.cursor()
        cur.execute(
            f"insert into file (file_name, file_upload_date) values('{uploadedFile.name}', '{str(datetime.now())}')")
        length_of_df = len(set(df[info['from']]))
        s = 'insert into provider (provider_name) values'
        for i, x in enumerate(set(df[info['from']])):
            s += f"('{x}'),"
            if i % 100 == 0 and i != 0:
                cur.execute(s[:-1])
                s = 'insert into provider (provider_name) values'
                conn.commit()
            load_progress.progress((i + 1) / length_of_df,
                                   f'–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –±–∞–∑—É {i + 1}/{length_of_df}')  # : {x[0]} ({x[3]})
        cur.execute(s[:-1])
        conn.commit()
        s = 'insert into nomenclature (nomenclature_name, nomenclature_properties) values'
        length_of_df = len(set(df[info['name']]))
        for i, x in enumerate(set(df[info['name']])):
            s += f"('{x}',''),"
            if i % 100 == 0 and i != 0:
                cur.execute(s[:-1])
                s = 'insert into nomenclature (nomenclature_name, nomenclature_properties) values'
                conn.commit()
            load_progress.progress((i + 1) / length_of_df,
                                   f'–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –≤ –±–∞–∑—É {i + 1}/{length_of_df}')  # : {x[0]} ({x[3]})
        cur.execute(s[:-1])
        conn.commit()
        length_of_df = len(df)
        s = '''insert into product (nomenclature_id, provider_id, product_cost, product_unit, file_id) values '''
        for i, x in enumerate(df.iloc):
            s += f'''((select nomenclature_id from nomenclature where nomenclature_name = '{x[0]}' ORDER BY nomenclature_id DESC limit 1),
                      (select provider_id from provider where provider_name = '{x[3]}' ORDER BY provider_id DESC limit 1),
                      {x[2]},
                      '{x[1]}',
                      (select file_id from file where file_name = '{uploadedFile.name}' ORDER BY file_id DESC limit 1)),'''
            if i % 100 == 0 and i != 0:
                cur.execute(s[:-1])
                s = '''insert into product (nomenclature_id, provider_id, product_cost, product_unit, file_id) values '''
                conn.commit()
            progress = i / length_of_df
            load_progress.progress(1 if progress > 1 else progress,
                                   f'–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É {i + 1}/{length_of_df}')  # : {x[0]} ({x[3]})
        cur.execute(s[:-1])
        conn.commit()
        conn.close()
        st.success(
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ ChatGPT —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ –°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–æ–∫, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")
else:
    st.write("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ utf-8")
